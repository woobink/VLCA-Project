#include <Servo.h>

int ch_thrust, ch_nozzle_angle, ch_xaxis, ch_yaxis, ch_zaxis;   //Channel declare (length of time)
int nozzle_angle=0;
int xaxis_angle=0;
int yaxis_angle=0;
int zaxis_angle=0;

Servo main_motor_esc; //control trottle of main motor
Servo sub_motor_esc; //control trottle of sub motor
Servo main_nozzle_servos; //main nozzle rotational servos(2)
Servo sub_motor_servos; //sub motor angle control servo(1)
Servo xaxis_servos;  //x axis control servos(2) at the main wing
Servo yaxis_servos;  //y axis control servos(2) at the tail wing
Servo zaxis_servo;  //z axis control servo(1) at the tail wing

//Servo main_nozzle_servo;  //main nozzle servo(1) that control its thrust angle(for hovering)(get data from gyro)

void setup() {
  pinMode(A0,INPUT);  //Ch1 (x-axis control; rolling)
  pinMode(A1,INPUT);  //Ch2 (y-axis control; pitching)
  pinMode(A2,INPUT);  //Ch3 (z-axis control; yawing)
  pinMode(A3,INPUT);  //Ch4 (Throttle control)
  pinMode(A4,INPUT);  //Ch5 (Main nozzle angle control; 3options: 0, 45, 90)
//  pinMode(A5,INPUT);  //gyro sensor pin

  main_motor_esc.attach(5); /////////////////////////////
  sub_motor_esc.attach(6);
  main_nozzle_servos.attach(0);
  sub_motor_servos.attach(1);   //connecting components//
  xaxis_servos.attach(4);
  yaxis_servos.attach(7);
  zaxis_servo.attach(8);    //////////////////////////////
//  main_nozzle_servo.attach(/*output pin # */); //for hovering function

  pinMode(5,OUTPUT);//output trottle mainmotor
  pinMode(6,OUTPUT);//output trottle submotor
  pinMode(0,OUTPUT);//output main nozzle angle servo
  pinMode(1,OUTPUT);//output submotor angle servo
  pinMode(4,OUTPUT);//output x-axis servo(rolling)
  pinMode(7,OUTPUT);//output y-axis servo(pitching)
  pinMode(8,OUTPUT);//output z-axis servo(yawing)
//  pinMode(/*output(servo) pin # */,OUTPUT); 

  main_motor_esc.writeMicroseconds(1500);     //////////////////////////////////////////
  sub_motor_esc.writeMicroseconds(1500);
  main_nozzle_servos.writeMicroseconds(1500);
  sub_motor_servos.writeMicroseconds(1500);   //    Setting all motors idle
  xaxis_servos.writeMicroseconds(1500);
  yaxis_servos.writeMicroseconds(1500);
  zaxis_servo.writeMicroseconds(1500);        ///////////////////////////////////////////

  Serial.begin(9600);   //set bits speed(9600 is max)
  delay(3000);    //waits for 7secs
}

void outputthrust(){
  if(ch_thrust < /*max minimum val*/ && ch_thrust > /*min minimum val*/){ //if throttle is minimum, stop
    sub_motor_esc.writeMicroseconds(1500);
    main_motor_esc.writeMicroseconds(1500);
  }
  else{
    sub_motor_esc.writeMicroseconds(/*min minimum value*/+ (ch_thrust - /*min minimum value*/)*0.5));     //limiting throttle to 90% for safety purpose
    main_motor_esc.writeMicroseconds(/*min minimum value*/+ (ch_thrust - /*min minimum value*/)*0.5));    //for test, use 50% instead
  }
}

// void main_nozzle_angle_control(int val){//this function has 3 options; 0,45,90 degree
//   if (val>/*medium minimum value*/ && val</*medium maximum value*/&& nozzle_angle==0){  //switch movement:0->45
//     //function of rotational servo motor movement control(rotate the main nozzle45 degree)
//     nozzle_angle=45;
//   }

//   else if (val >/*maximum's minimum value*/&& nozzle_angle==45){  //switch movement:45->90
//     //function of rotational servo motor movement control(rotate the main nozzle 45 degree again)
//     nozzle_angle=90;
//   }

//   else if (val>/*medium minimum value*/ && val</*medium maximum value*/&& nozzle_angle==90){  //switch movement:90->45
//     //function of rotational servo motor movement control(rotate the main nozzle -45 degree)
//     nozzle_angle=45;
//   }

//   else if (val>/*minimum's minimum value*/ && val</*minimum's maximum value*/&& nozzle_angle==45){  //switch movement:45->0
//     //function of rotational servo motor movement control(rotate the main nozzle -45 degree again)
//     nozzle_angle=0;
//   }
// }

void xaxis_movement(int val){
  //xaxis movement function
}

void yaxis_movement(int val){
  //yaxis movement function
}

void zaxis_movement(int val){
  //zaxis movement function
}

void printvalues(){
  Serial.println("------ Channel Values ------");
  Serial.print("Ch Thrust Value: ");
  Serial.println(ch_thrust);
  Serial.print("Ch Nozzle Angle: ");
  Serial.println(ch_nozzle_angle);
  Serial.print("Ch x-axis Value: ");
  Serial.println(ch_xaxis);
  Serial.print("Ch y-axis Value: ");
  Serial.println(ch_yaxis);
  Serial.print("Ch z-axis Value: ");
  Serial.println(ch_zaxis);
  Serial.println("");
  Serial.println("");
  delay(1000);
}

void loop() {
  ch_thrust = pulseIn(A3, HIGH, 21000);       //------------------------------------
  ch_nozzle_angle = pulseIn(A4, HIGH, 21000);
  ch_xaxis = pulseIn(A0, HIGH, 21000);        // getting pulse width from receiver
  ch_yaxis = pulseIn(A1, HIGH, 21000);
  ch_zaxis = pulseIn(A2, HIGH, 21000);        // -----------------------------------

/////////////////////////////////////////////////////////////////////////////////////////////////////
/*main control program*/

  // if (ch_thrust>/*minimum thrust value*/){
  //   outputthrust();
  // }

  // if (ch_nozzle_angle>/*very minumum value*/ && ch_nozzle_angle</*very maximum value*/){
  //   main_nozzle_angle_control(ch_nozzle_angle);
  // }

  // if (ch_xaxis>/*minimum x-axis value*/){
  //   xaxis_movement(ch_xaxis);
  // }

  // if (ch_yaxis>/*minimum y-axis value*/){
  //   yaxis_movement(ch_yaxis);
  // }

  // if (ch_zaxis>/*minimum z-axis value*/){
  //   zaxis_movement(ch_zaxis);
  // }

//////////////////////////////////////////////////////////////////////////

/*test program to find the value of max/min value of transmitter*/
  printvalues();
//////////////////////////////////////////////////////////////////////////
}
